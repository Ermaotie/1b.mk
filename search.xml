<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信订阅华工教务处通知</title>
      <link href="/2020/08/08/subscribe/"/>
      <url>/2020/08/08/subscribe/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>该服务目前处于内测阶段，对意外的情况容忍度较低，之后会不断修复。目前请按照严格按照教程操作。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>微信账号</li><li>GitHub账号</li></ul><h1 id="订阅步骤"><a href="#订阅步骤" class="headerlink" title="订阅步骤"></a>订阅步骤</h1><h2 id="关注公众号“二茂铁Fe”"><a href="#关注公众号“二茂铁Fe”" class="headerlink" title="关注公众号“二茂铁Fe”"></a>关注公众号“二茂铁Fe”</h2><p><img src="https://1b.mk/images/wechat_channel.jpg" alt="QR-Code"></p><h2 id="微信绑定Server酱，获取SCKEY"><a href="#微信绑定Server酱，获取SCKEY" class="headerlink" title="微信绑定Server酱，获取SCKEY"></a>微信绑定Server酱，获取SCKEY</h2><p><a href="https://sc.ftqq.com/">Server酱</a>地址：<a href="https://sc.ftqq.com/">点击访问</a><br><img src="https://1b.mk/images/sub_step_1.png" alt="DemoShow"></p><ul><li>步骤也很简单<ul><li>登入：用GitHub账号登入网站</li><li>绑定：点击「微信推送」，扫码关注“方糖”，按提示绑定微信。</li><li>最后点击<strong>发送消息</strong>查看自己的SCKEY，请将其复制到剪切板。</li></ul></li></ul><h2 id="添加订阅通知"><a href="#添加订阅通知" class="headerlink" title="添加订阅通知"></a>添加订阅通知</h2><ul><li>返回“二茂铁Fe”,发送  <strong>订阅通知</strong> （四个字）</li><li>按照格式发送自己的SCKEY</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCKEY xxxxxxxx</span><br></pre></td></tr></table></figure><h2 id="查看消息列表"><a href="#查看消息列表" class="headerlink" title="查看消息列表"></a>查看消息列表</h2><ul><li>若出现了测试信息，那么恭喜你，订阅成功！</li></ul><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>很抱歉，由于我的微信公众号为个人号，无法申请到直接推送消息的权限，因此只能借助“Easy”的ServerChan来实现主动推送，导致整个流程变得繁琐。目前程序仍然存在很多不完善的地方，仍需改进。我将代码放在<a href="https://github.com/Ermaotie/Q-A-Robot">这里</a>,如果觉得该项目有用的话，请给我一颗星星。最后，欢迎志同道合的朋友一起来完善它！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>影视解析--前端学习(html+js+css)</title>
      <link href="/2020/07/23/%E5%BD%B1%E8%A7%86%E8%A7%A3%E6%9E%90-%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0-html-js-css/"/>
      <url>/2020/07/23/%E5%BD%B1%E8%A7%86%E8%A7%A3%E6%9E%90-%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0-html-js-css/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>其实我对影视VIP的需求并不是很大，很多时候只是听到身边其他人的推荐抑或是网上很火且能吸引我的作品，才会去购买。不过朋友圈里倒是好多苦不堪言的状况，喜欢看的综艺节目总是在不同的平台上，而如果不是合租的话，一个普通大学生是不太情愿去购买多家视频网站会员的。因此，解析网站就成了一个可行的选择，当然大多数解析网站会有大量的广告。而在这里，我筛选了一些无广告或者说几乎无广告的API。<br><a href="https://github.com/Ermaotie/MoviesParsing">Github</a><br><a href="http://movie.1b.mk/">演示Demo</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>已有的接口<br>其实这个API才是各种影视解析网站的核心, 当然写这个有一定的难度，不过就现在，我们只要调用就可以了。</li><li>Github page 或 域名及空间<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2>如果只要基本功能的实现，几行html，再加上一句js就完全搞定了。<h3 id="剖析"><a href="#剖析" class="headerlink" title="剖析"></a>剖析</h3></li><li>目标url = 接口 + 输入网址</li><li>跳转到目标 url<h2 id="具体优化"><a href="#具体优化" class="headerlink" title="具体优化"></a>具体优化</h2><h3 id="提高兼容性"><a href="#提高兼容性" class="headerlink" title="提高兼容性"></a>提高兼容性</h3>由于语言的多样性，而HTML又可以显示不同的语言，所以要在<head>中声明自己的doc是什么类型的，如何编码的：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># HTML4</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&#x2F;&gt;</span><br><span class="line"># HTML5</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="页面背景优化"><a href="#页面背景优化" class="headerlink" title="页面背景优化"></a>页面背景优化</h3>最开始计划是放一张智子的图片，但是国内对Github Page不太友好，所以使用js生成漂亮的背景：<br>这里放链接吧，原作写的太好看了。<a href="https://www.html.cn/archives/8722">点击链接</a><h4 id="需要注意的是，示例中给的放在了-lt-div-gt-下，但是放在-lt-div-gt-下会导致页面上方有一条黑边，我想是div标签的bug吧。因为是背景，所以直接选择body即可"><a href="#需要注意的是，示例中给的放在了-lt-div-gt-下，但是放在-lt-div-gt-下会导致页面上方有一条黑边，我想是div标签的bug吧。因为是背景，所以直接选择body即可" class="headerlink" title="需要注意的是，示例中给的放在了&lt;div&gt;下，但是放在&lt;div&gt;下会导致页面上方有一条黑边，我想是div标签的bug吧。因为是背景，所以直接选择body即可"></a>需要注意的是，示例中给的放在了&lt;div&gt;下，但是放在&lt;div&gt;下会导致页面上方有一条黑边，我想是div标签的bug吧。因为是背景，所以直接选择body即可</h4><h3 id="跳转按钮以及其他部件优化"><a href="#跳转按钮以及其他部件优化" class="headerlink" title="跳转按钮以及其他部件优化"></a>跳转按钮以及其他部件优化</h3>也是通过加标签class或id，再通过CSS选择器，设置对应参数。</li><li>强制居中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.main&#123;</span><br><span class="line">    text-align: center; &#x2F;*让div内部文字居中*&#x2F;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border-radius: 20px;</span><br><span class="line">    width: 290px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    margin: auto;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><a href="https://chinese.freecodecamp.org/forum/t/topic/292/2">按键优化</a><br>鼠标位于btn上方时文字滑动浮现，离开滑动渐隐。span标签在button里，用于承载文字。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">.button &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    background-color: #f3974c;</span><br><span class="line">    border: none;</span><br><span class="line">    color: #FFFFFF;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    transition: all 0.5s;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    margin: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  .button span &#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    position: relative;</span><br><span class="line">    transition: 0.5s;</span><br><span class="line">  &#125;</span><br><span class="line">  .button span:after &#123;</span><br><span class="line">  content: &#39;\00bb&#39;;  &#x2F;* CSS Entities. 如果用的是 HTML Entities, 请改成 &amp;#8594;*&#x2F;</span><br><span class="line">  position: absolute;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    right: -20px;</span><br><span class="line">    transition: 0.5s;</span><br><span class="line">  &#125;</span><br><span class="line">  .button:hover span &#123;</span><br><span class="line">    padding-right: 25px;</span><br><span class="line">  &#125;</span><br><span class="line">  .button:hover span:after &#123;</span><br><span class="line">    opacity: 1;</span><br><span class="line">    right: 0;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li>&lt;input&gt;框优化<br>圆角及选中荧光<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#input</span><br><span class="line">&#123;</span><br><span class="line">    outline-style: none ;</span><br><span class="line">    border-width: 1px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">&#125;</span><br><span class="line">#input:focus&#123;</span><br><span class="line">    border-color: #66afe9;</span><br><span class="line">    outline: 0;</span><br><span class="line">    -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);</span><br><span class="line">    box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2>又开了一个新坑，发现前端似乎也挺有意思的。在平时的日常生活中，总能发现一些给人耳目一新的一些网页的效果，很值得我们不断去学习。当然js也不止可以让网页变得好看，还可以实现更多复杂的逻辑目的。这些都等着我去学习。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>配置Hexo 并使用gitalk</title>
      <link href="/2020/07/19/%E9%85%8D%E7%BD%AEHexo-%E5%B9%B6%E4%BD%BF%E7%94%A8gitalk/"/>
      <url>/2020/07/19/%E9%85%8D%E7%BD%AEHexo-%E5%B9%B6%E4%BD%BF%E7%94%A8gitalk/</url>
      
        <content type="html"><![CDATA[<h2 id="安装所需环境"><a href="#安装所需环境" class="headerlink" title="安装所需环境"></a>安装所需环境</h2><ul><li><p>Hexo 基于 Node.js，并使用npm管理器安装，若需要安置在github上，则也需要安装git</p><ul><li><p>安装</p></li><li><p>换源</p><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>更换国内淘宝源(长期生效)：</p><p>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p></li></ul></li></ul><h2 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h2><h3 id="Hexo概述"><a href="#Hexo概述" class="headerlink" title="Hexo概述"></a>Hexo概述</h3><p>Hexo 是一款可以通过git工具，发布静态博文的一款优秀博客系统。它最重要的特点就是<strong>轻便</strong>，<strong>轻</strong>且<strong>便</strong></p><h3 id="Hexo官方文档"><a href="#Hexo官方文档" class="headerlink" title="Hexo官方文档"></a><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></h3><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><pre><code># 全局安装npm install -g hexo-cli</code></pre><h3 id="使用Hexo-1"><a href="#使用Hexo-1" class="headerlink" title="使用Hexo"></a>使用Hexo</h3><h4 id="初始化Hexo文件夹"><a href="#初始化Hexo文件夹" class="headerlink" title="初始化Hexo文件夹"></a>初始化Hexo文件夹</h4><p>控制台中打开所要初始化的文件夹</p><pre><code>hexo init</code></pre><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>新建xxx</p><pre><code>hexo new demoTitlehexo new page &quot;demoPage&quot;hexo new tag &quot;demoTag&quot;hexo new category &quot;demoName&quot;</code></pre><p>维护使用</p><pre><code># 清除原有生成的静态博客hexo clean# 生成静态博客hexo g  # hexo generate# 部署（到github）hexo d  # hexo deploy# 本地查看 http://localhost:4000hexo s  # hexo server</code></pre><h2 id="安装Next"><a href="#安装Next" class="headerlink" title="安装Next"></a>安装Next</h2><p>下载<a href="https://github.com/iissnan/hexo-theme-next">github项目Next</a>这里使用的是低版本，已停止维护。7.0以上自动集成gitalk，到配置文件中打开即可。<br>下载至hexo/theme中</p><h2 id="配置gitalk"><a href="#配置gitalk" class="headerlink" title="配置gitalk"></a>配置gitalk</h2><p>详情见<a href="https://www.itfanr.cc/2019/04/30/hexo-add-gitalk-comment/">此</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROS仿真（simulation）(一)</title>
      <link href="/2020/07/18/ROS%E4%BB%BF%E7%9C%9F%EF%BC%88simulation%EF%BC%89-%E4%B8%80/"/>
      <url>/2020/07/18/ROS%E4%BB%BF%E7%9C%9F%EF%BC%88simulation%EF%BC%89-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>SLAM仿真建图：</p><pre><code># 打开一个地图文件，并带有一个仿真机器人roslaunch turtlebot3_gazebo turtlebot3_world.launch# 运行SLAM启动文件，启动RVIZroslaunch turtlebot3_slam turtlebot3_slam.launch# 运行键盘控制roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch# 建图完毕后，保存地图rosrun map_server map_saver -f ~/map# 保存到~/ 下 “上面的~/是指 topic中”</code></pre><p>仿真导航：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 打开一个地图文件，并带有一个仿真机器人</span><br><span class="line">roslaunch turtlebot3_gazebo turtlebot3_world.launch</span><br><span class="line"></span><br><span class="line"># 依赖于保存好的map.pgm</span><br><span class="line">roslaunch turtlebot3_navigation turtlebot3_navigation.launch map_file:&#x3D;$HOME&#x2F;map.yaml</span><br></pre></td></tr></table></figure><ul><li>要给出初始数据，请按照说明进行操作。 <ul><li>点击2D Pose Estimate按钮</li><li>通过单击并拖动地图上的方向来设置地图上的大致位置。</li><li>箭头的每个点意味着TurtleBot3的预期姿势。激光扫描仪将在近似位置绘制线条，如地图上的墙壁。</li><li>要发送目标位置：</li><li>点击 2D Nav Goal按钮</li><li>点击地图上你想要的TurtleBot驱动和拖动方向TurtleBot应该指向地方</li><li>要在机器人到达目标位置之前停止机器人，请发送TurtleBot3的当前位置。</li></ul></li></ul><p>需要已经启动机器人</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 开机自启运行脚本</title>
      <link href="/2020/07/18/Ubuntu-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/07/18/Ubuntu-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<ol><li>将脚本文件放在 <code>/etc/init.d/</code> 下<br>脚本格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">### BEGIN INIT INFO</span><br><span class="line"># Provides:          1bmk</span><br><span class="line"># Required-Start:    $local_fs $network</span><br><span class="line"># Required-Stop:     $local_fs</span><br><span class="line"># Default-Start:     2 3 4 5</span><br><span class="line"># Default-Stop:      0 1 6</span><br><span class="line"># Short-Description: self define auto start</span><br><span class="line"># Description:       self define auto start</span><br><span class="line">### END INIT INFO</span><br><span class="line">sudo ntpdate pool.ntp.org</span><br></pre></td></tr></table></figure></li><li>加权限 <code> sudo chmod +x demo.sh</code></li><li><code>sudo update-rc.d demo.sh defaults 90</code></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>turtlebot安装BUG (ubuntu18.04+melodic)</title>
      <link href="/2020/07/15/turtlebot%E5%AE%89%E8%A3%85BUG-ubuntu18-04-melodic/"/>
      <url>/2020/07/15/turtlebot%E5%AE%89%E8%A3%85BUG-ubuntu18-04-melodic/</url>
      
        <content type="html"><![CDATA[<p>教程：<a href="https://www.ncnynl.com/archives/201903/2884.html">创客制造</a></p><p>第一个错是缺失urdf（– Could NOT find urdf (missing: urdf_DIR)）：<br>解决方法：先卸载：sudo apt-get remove ros-melodic-*<br>再重新按照官方教程安装：<a href="http://wiki.ros.org/melodic/Installation/Ubuntu">http://wiki.ros.org/melodic/Installation/Ubuntu</a></p><p>第二个错：Could not find a package configuration file provided by “ecl_threads” with any of the following names:<br>解决方法：sudo apt-get install ros-melodic-ecl-threads<br>第三个错：Could not find a package configuration file provided by ‘ecl_geometry’<br>解决方法：sudo apt-get install ros-melodic-ecl-geometry</p><p>第四个错：Could not find a package configuration file provided by “kobuki_dock_drive”<br>解决方法：sudo apt-get install ros-melodic-kobuki-dock-drive</p><p>第五个错：No package ‘orocos-bfl’ found<br>解决方法：sudo apt-get install ros-melodic-bfl</p><p>第六个错：Could not find a package configuration file provided by “kobuki_driver”<br>解决方法：sudo apt-get install ros-melodic-kobuki-driver</p><p>第七个错： Could not find a package configuration file provided by “ecl_streams” with any of the following names:<br>解决方法：sudo apt-get install ros-melodic-ecl-streams</p><p>第八个错：/home/wwh/turtlebot_ws/src/kobuki_keyop/src/keyop_core.cpp: In member function ‘void keyop_core::KeyOpCore::remoteKeyInputReceived(const KeyboardInput&amp;)’:<br>/home/wwh/turtlebot_ws/src/kobuki_keyop/src/keyop_core.cpp:274:28: error: ‘const KeyboardInput {aka const struct kobuki_msgs::KeyboardInput_}’ has no member named ‘pressed_key’; did you mean ‘pressedKey’?<br>processKeyboardInput(key.pressed_key);<br>^<del>~<br>pressedKey<br>/home/wwh/turtlebot_ws/src/kobuki_keyop/src/keyop_core.cpp: In member function ‘void keyop_core::KeyOpCore::processKeyboardInput(char)’:<br>/home/wwh/turtlebot_ws/src/kobuki_keyop/src/keyop_core.cpp:293:38: error: ‘KEYCODE_LEFT’ is not a member of ‘kobuki_msgs::KeyboardInput {aka kobuki_msgs::KeyboardInput_}’<br>case kobuki_msgs::KeyboardInput::KEYCODE_LEFT:<br>^</del><br>/home/wwh/turtlebot_ws/src/kobuki_keyop/src/keyop_core.cpp:298:38: error: ‘KEYCODE_RIGHT’ is not a member of ‘kobuki_msgs::KeyboardInput {aka kobuki_msgs::KeyboardInput_}’<br>case kobuki_msgs::KeyboardInput::KEYCODE_RIGHT:<br>^<del>~<br>/home/wwh/turtlebot_ws/src/kobuki_keyop/src/keyop_core.cpp:303:38: error: ‘KEYCODE_UP’ is not a member of ‘kobuki_msgs::KeyboardInput {aka kobuki_msgs::KeyboardInput_}’<br>case kobuki_msgs::KeyboardInput::KEYCODE_UP:<br>^</del><br>/home/wwh/turtlebot_ws/src/kobuki_keyop/src/keyop_core.cpp:308:38: error: ‘KEYCODE_DOWN’ is not a member of ‘kobuki_msgs::KeyboardInput {aka kobuki_msgs::KeyboardInput_}’<br>case kobuki_msgs::KeyboardInput::KEYCODE_DOWN:<br>^<del>~<br>/home/wwh/turtlebot_ws/src/kobuki_keyop/src/keyop_core.cpp:313:38: error: ‘KEYCODE_SPACE’ is not a member of ‘kobuki_msgs::KeyboardInput {aka kobuki_msgs::KeyboardInput_}’<br>case kobuki_msgs::KeyboardInput::KEYCODE_SPACE:<br>^</del><br>kobuki_keyop/src/CMakeFiles/keyop.dir/build.make:62: recipe for target ‘kobuki_keyop/src/CMakeFiles/keyop.dir/keyop_core.cpp.o’ failed</p><p>所需文件：<br><a href="./images/2954616753.zip">pud.zip</a><br>若编译出现错误：   processKeyboardInput(key.pressed_key);<br>     case kobuki_msgs::KeyboardInput::KEYCODE_LEFT:<br>    case kobuki_msgs::KeyboardInput::KEYCODE_RIGHT:<br>     …<br>请用包中的文件替换kobuki_node/src/library/slot_callbacks.cpp和/kobuki_keyop/src/keyop_core.cpp</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROS学习（四）----参数与launch</title>
      <link href="/2020/06/25/ROS%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89-%E5%8F%82%E6%95%B0%E4%B8%8Elaunch/"/>
      <url>/2020/06/25/ROS%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89-%E5%8F%82%E6%95%B0%E4%B8%8Elaunch/</url>
      
        <content type="html"><![CDATA[<h1 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h1><p>launch是一个xml语法的文件</p><h1 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h1><p>方便启动多个节点，设置参数</p><h1 id="基本构成"><a href="#基本构成" class="headerlink" title="基本构成"></a>基本构成</h1><ul><li>&lt;launch&gt;<ul><li>&lt;node&gt;</li><li>&lt;param&gt;</li><li>&lt;arg&gt;</li><li>…</li></ul></li></ul><p>xml中缩进没有实际意义，但为了表达清楚各标签间关系，使用缩进。</p><h1 id=""><a href="#" class="headerlink" title=""></a><node></h1><p>demo: 运行”package-name”中”executable-name”的二进制文件，</p><ul><li>ROS中注册节点名为”node-name”（会自动修改ros::init()中的内容）</li></ul><pre><code>&lt;node pkg=&quot;package-name&quot;type=&quot;executable-name&quot; name=&quot;node-name&quot; /&gt;</code></pre><h2 id="其他常用参数"><a href="#其他常用参数" class="headerlink" title="其他常用参数"></a><node>其他常用参数</h2><ul><li><p>output = “screen”：将节点的标准输出打印到终端屏幕，默认输出为日志文档；</p></li><li><p>respawn = “true”：复位属性，该节点停止时，会自动重启，默认为false；</p></li><li><p>required = “true”：必要节点，当该节点终止时，launch文件中的其他节点也被终止；</p></li><li><p>ns = “namespace”：命名空间，为节点内的相对名称添加命名空间前缀；</p></li><li><p>args = “arguments”：节点需要的输入参数。</p></li></ul><h2 id="参数标签"><a href="#参数标签" class="headerlink" title="参数标签"></a>参数标签</h2><ol><li>&lt;param&gt;<br>parameter是ROS系统运行中的参数，存储在参数服务器中。在launch文件中通过<param>元素加载parameter；launch文件执行后，parameter就加载到ROS的参数服务器上了。每个活跃的节点都可以通过 **ros::param::get()**接口来获取parameter的值，用户也可以在终端中通过rosparam命令获得parameter的值。</li></ol><p>&lt;param&gt;的使用方法如下：</p><pre><code>&lt;param name=&quot;output_frame&quot; value=&quot;odom&quot;/&gt;</code></pre><p>运行launch文件后，output_frame这个parameter的值就设置为odom，并且加载到ROS参数服务器上了。但是在很多复杂的系统中，参数的数量很多，如果这样一个一个的设置会非常麻烦，ROS也为我们提供了另外一种类似的参数加载方式——<rosparam>：</p><pre><code>&lt;rosparamfile=&quot;$(find 2dnav_pr2)/config/costmap_common_params.yaml&quot; command=&quot;load&quot; ns=&quot;local_costmap&quot; /&gt;</code></pre><p>&lt;rosparam&gt;可以帮助我们将一个yaml格式文件中的参数全部加载到ROS参数服务器中，需要设置command属性为“load”，还可以选择设置命名空间“ns”。</p><ol start="2"><li><p>&lt;arg&gt;<br>&lt;arg&gt; 为launch文件内部参数。<br>设置argument使用<arg>标签元素，语法如下：</p> <arg name=”arg-name” default=”arg-value”/></li></ol><p>launch文件中需要使用到argument时，可以使用如下方式调用：</p><pre><code>&lt;paramname=&quot;foo&quot; value=&quot;$(arg arg-name)&quot; /&gt;&lt;node name=&quot;node&quot; pkg=&quot;package&quot; type=&quot;type &quot;args=&quot;$(arg arg-name)&quot; /&gt;</code></pre><h2 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h2><ol><li><p>引用其他launch文件（嵌套复用）<br>在复杂的系统当中，launch文件往往有很多，这些launch文件之间也会存在依赖关系。如果需要直接复用一个已有launch文件中的内容，可以使用<include>标签包含其他launch文件，这和C语言中的include几乎是一样的。</p> <include file="$(dirname)/other.launch" /></li></ol><p>总而言之，launch是ROS框架中非常实用、灵活的功能，它类似于一种高级编程语言，可以帮助我们管理启动系统时的方方面面。在使用ROS的过程中，很多情况下我们并不需要编写大量代码，仅需要使用已有的功能包，编辑一下launch文件，就可以完成很多机器人功能。</p><ol start="2"><li>重映射</li></ol><p>ROS的设计目标是提高代码的复用率，所以ROS社区中的很多功能包我们都可以拿来直接使用，而不需要关注功能包的内部实现。那么问题就来了，别人功能包的接口不一定和我们的系统兼容呀？</p><p>ROS提供一种重映射的机制，简单来说就是取别名，类似于C++中的别名机制，我们不需要修改别人功能包的接口，只需要将接口名称重映射一下，取个别名，我们的系统就认识了（接口的数据类型必须相同）。launch文件中的<remap>标签可以帮我们实现这个重映射的功能。</p><p>比如turtlebot的键盘控制节点，发布的速度控制指令话题可能是/turtlebot/cmd_vel，但是我们自己的机器人订阅的速度控制话题是/cmd_vel，这个时候使用<remap>就可以轻松解决问题，将/turtlebot /cmd_vel重映射为/cmd_vel，我们的机器人就可以接收到速度控制指令了：</p><pre><code>&lt;remap from=&quot;/turtlebot/cmd_vel&quot;to=&quot;/cmd_vel&quot;/&gt;</code></pre><p>重映射机制在ROS中的使用非常广泛，也非常重要，方法不止这一种，也可以在终端rosrun命令中实现重映射，大家一定要理解好这种机制。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROS学习（三）----action</title>
      <link href="/2020/06/25/ROS%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89-action/"/>
      <url>/2020/06/25/ROS%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89-action/</url>
      
        <content type="html"><![CDATA[<p>在了解了service与topic这两种较为简单的通信之后，继续学习一种新的交互方式—-action</p><h1 id="文件构成"><a href="#文件构成" class="headerlink" title="文件构成"></a>文件构成</h1><p>action文件以**.action**为后缀，其内容与service相似，多了过程中的反馈（Feedback）</p><pre><code># demo.action# define goalint32 demo_goal---# define resultint[] demo_res---# define feedbackint[] demo_fb</code></pre><h1 id="编译action"><a href="#编译action" class="headerlink" title="编译action"></a>编译action</h1><p>编译action文件为头文件时，</p><p><strong>CMakeList.txt</strong>中需要添加activelib 及 activelib_msgs</p><pre><code>find_package(....generate_message(activelib_msgs...catkin_package(LIBRARIES ...               CATKIN_DEPENDS actionlib actionlib_msgs roscpp std_msgs ...               DEPENDS BOOST               )</code></pre><h1 id="cpp中调用action文件与actionlib"><a href="#cpp中调用action文件与actionlib" class="headerlink" title="cpp中调用action文件与actionlib"></a>cpp中调用action文件与actionlib</h1><pre><code>// 以demo.action为例#include&lt;demoAction.h&gt;//调用actionlib//server端#include&lt;actionlib/simple_action_server.h&gt;//client端#include&lt;actionlib/simple_action_client.h&gt; // action library header files#inclued&lt;actionlib/terminal_state.h&gt; //action_goals status files</code></pre><h1 id="需要注意的细节"><a href="#需要注意的细节" class="headerlink" title="需要注意的细节"></a>需要注意的细节</h1><ol><li><p>Client<br> // Action Client Declaration (Action Name: ros_tutorial_action)<br>   actionlib::SimpleActionClient&lt;ros_tutorials_action::FibonacciAction&gt; ac(“ros_tutorial_action”, true);<br>//client 端不需要节点句柄， true表示不需要ros::spin();,因此循环等待服务为：</p><p> ac.waitForServer()</p></li><li><p>Server<br>// 句柄需在action_sercer 创建之前被创建<br>ros::NodeHandle nh_;  // Node handle declaration<br>actionlib::SimpleActionServer&lt;ros_tutorials_action::FibonacciAction&gt; as_;</p></li></ol><p>// 初始化as_时，会自动获取client发出action文件中的goal的地址</p><pre><code>public:  // Initialize action server (Node handle, action name, action callback function)  FibonacciAction(std::string name) :    as_(nh_, name, boost::bind(&amp;FibonacciAction::executeCB, this, _1), false),    action_name_(name)  &#123;    as_.start();  &#125;......</code></pre><p><a href="https://www.jianshu.com/p/30e79d2a8f7d">bind绑定函数</a></p><p>关于请求的细节：</p><pre><code>// 确认请求存在且非preempted// Preempted - Processing of the goal was canceled by either another goal, //             or a cancel request sent to the action serverfor(int i=1; i&lt;=goal-&gt;order; i++)    &#123;      // Confirm action cancellation from action client      if (as_.isPreemptRequested() || !ros::ok())      &#123;        // Notify action cancellation        ROS_INFO(&quot;%s: Preempted&quot;, action_name_.c_str());        // Action cancellation and consider action as failure and save to variable        as_.setPreempted();        success = false;        break;      &#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROS学习（二）----节点（Node）</title>
      <link href="/2020/06/21/ROS%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%8A%82%E7%82%B9%EF%BC%88Node%EF%BC%89/"/>
      <url>/2020/06/21/ROS%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%8A%82%E7%82%B9%EF%BC%88Node%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h5 id="重新返回去熟悉操作，加深印象。"><a href="#重新返回去熟悉操作，加深印象。" class="headerlink" title="重新返回去熟悉操作，加深印象。"></a>重新返回去熟悉操作，加深印象。</h5><p>这次将更条理地，细致地梳理遇到的一系列问题。<br><img src="./images/2311292133.png" alt="1592790092(1).png"></p><h1 id="Package-结构"><a href="#Package-结构" class="headerlink" title="Package 结构"></a>Package 结构</h1><ul><li>package<ul><li>src<ul><li>example_node.cpp</li></ul></li><li>…</li><li>package.xml</li><li>CMakList.txt</li></ul></li></ul><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><ol><li>${workspace}/src 下使用命令 <code>catkin_create_pkg $&#123;pkg_name&#125; $&#123;dependencis&#125;</code></li><li>进入package(后用pkg代替）编写文件。（cpp || py）</li><li>编辑 <strong>package.xml &amp;&amp; CMakList.txt</strong></li><li><code>catkin_make</code></li></ol><h1 id="流程中的一些细节问题"><a href="#流程中的一些细节问题" class="headerlink" title="流程中的一些细节问题"></a>流程中的一些细节问题</h1><h2 id="2-编写cpp"><a href="#2-编写cpp" class="headerlink" title="2. 编写cpp"></a>2. 编写cpp</h2><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><p>默认两个参数：    <strong>int argc, char**argv</strong><br>初始化时会用到： <code>ros::init(argc,argv,&quot;node_name&quot;);</code></p><h3 id="回调参数"><a href="#回调参数" class="headerlink" title="回调参数"></a>回调参数</h3><p>ConstPtr&amp; 与 Ptr&amp; 的区别：<br>ConstPtr 常类型msg ，减少传值次数。<br><a href="https://answers.ros.org/question/212857/what-is-constptr/">https://answers.ros.org/question/212857/what-is-constptr/</a></p><h2 id="3-编辑package-xml-amp-amp-CMakeList-txt"><a href="#3-编辑package-xml-amp-amp-CMakeList-txt" class="headerlink" title="3.编辑package.xml &amp;&amp; CMakeList.txt"></a>3.编辑package.xml &amp;&amp; CMakeList.txt</h2><h3 id="使用了msg文件"><a href="#使用了msg文件" class="headerlink" title="使用了msg文件"></a>使用了msg文件</h3><h4 id="由于ROS通过message-generation-对-msg文件编译以及-message-runtime-在节点中运行有关-msg文件。所以需要在package-xml中加入编译依赖及运行依赖"><a href="#由于ROS通过message-generation-对-msg文件编译以及-message-runtime-在节点中运行有关-msg文件。所以需要在package-xml中加入编译依赖及运行依赖" class="headerlink" title="由于ROS通过message_generation 对.msg文件编译以及 message_runtime 在节点中运行有关.msg文件。所以需要在package.xml中加入编译依赖及运行依赖"></a>由于ROS通过message_generation 对.msg文件编译以及 message_runtime 在节点中运行有关.msg文件。所以需要在<strong>package.xml</strong>中加入编译依赖及运行依赖</h4><pre><code>&lt;build_depend&gt;message_generation&lt;/build_depend&gt; &lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</code></pre><h4 id="同时需要修改-CMakeList-txt"><a href="#同时需要修改-CMakeList-txt" class="headerlink" title="同时需要修改 CMakeList.txt"></a>同时需要修改 <strong>CMakeList.txt</strong></h4><h5 id="在catkin-make编译找依赖包的位置，写入”message-generation”"><a href="#在catkin-make编译找依赖包的位置，写入”message-generation”" class="headerlink" title="在catkin_make编译找依赖包的位置，写入”message_generation”"></a>在catkin_make编译找依赖包的位置，写入”message_generation”</h5><pre><code>find_package(catkin REQUIRED COMPONENTS  roscpp  std_msgs  message_generation)</code></pre><h5 id="在添加编译msg的步骤（generate-message-即在devel下生成对应的-demo-h"><a href="#在添加编译msg的步骤（generate-message-即在devel下生成对应的-demo-h" class="headerlink" title="在添加编译msg的步骤（generate_message(), 即在devel下生成对应的  demo.h"></a>在添加编译msg的步骤（generate_message(), 即在devel下生成对应的  <strong>demo.h</strong></h5><pre><code>add_message_files(  FILES  demo.msg)generate_messages(DEPENDENCIES std_msgs)</code></pre><h5 id="添加Node运行时依赖-message-runtime"><a href="#添加Node运行时依赖-message-runtime" class="headerlink" title="添加Node运行时依赖 message_runtime"></a>添加Node运行时依赖 <strong>message_runtime</strong></h5><pre><code>catkin_package( CATKIN_DEPENDS roscpp std_msgs message_runtime)</code></pre><h5 id="若需编译为二进制文件"><a href="#若需编译为二进制文件" class="headerlink" title="若需编译为二进制文件"></a>若需编译为二进制文件</h5><pre><code># 仅为demo， 前两行为 将cpp文件编译为# 添加 二进制文件         二进制文件名    cpp文件位置add_executable(fbnq_subscriber src/topic_subscriber.cpp)# add_executable是对于构建之后要创建的可执行文件的选项。# 二进制文件引用         二进制文件名         对应上面填写的target_link_libraries(fbnq_subscriber $&#123;catkin_LIBRARIES&#125;)# target_link_libraries是在创建特定的可执行文件之前将库和可执行文件进行链接的 选项。 # 添加依赖                    二进制文件名         依赖编译后的messageadd_dependencies(fbnq_subscriber $&#123;PROJECT_NAME&#125;_generate_messages_cpp)# add_dependencies是一个首选项，是在构建库和可执行文件之前创建依赖消息和dynamic reconfigure的设置。</code></pre><h6 id="需要注意俩个add-dependencies添加的依赖是不一样的"><a href="#需要注意俩个add-dependencies添加的依赖是不一样的" class="headerlink" title="需要注意俩个add_dependencies添加的依赖是不一样的"></a>需要注意俩个<strong>add_dependencies</strong>添加的依赖是不一样的</h6><p><img src="./images/1204245160.png" alt="微信截图_20200622093823.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>旧笔记本安装Ubuntu</title>
      <link href="/2020/06/17/%E6%97%A7%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%89%E8%A3%85Ubuntu/"/>
      <url>/2020/06/17/%E6%97%A7%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%89%E8%A3%85Ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ol><li>制作安装盘</li><li>安装<h1 id="所需物品"><a href="#所需物品" class="headerlink" title="所需物品"></a>所需物品</h1></li><li>8G以上 U盘</li><li>一台旧笔记本</li></ol><h1>制作安装盘</h1>## pre:下载镜像: [点击链接][1]使用uiso9_pe烧录到U盘：1. [点击下载][2]2. 选择好镜像文件后，选择**“写入硬盘映像”**<h1>安装</h1>1. 插入U盘，修改BIOS2. 按引导一步一步进行，全部清除原分区3. 等待]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux--端口</title>
      <link href="/2020/06/16/Linux-%E7%AB%AF%E5%8F%A3/"/>
      <url>/2020/06/16/Linux-%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Cause"><a href="#Cause" class="headerlink" title="Cause"></a>Cause</h2><p>经常使用端口服务，同时可能非法退出，所以整理一下有关端口占用及解除的命令。</p><h3 id="查看占用"><a href="#查看占用" class="headerlink" title="查看占用"></a>查看占用</h3><pre><code>netstat -anl | grep &quot;80&quot;# 或者lsof -i:80</code></pre><h3 id="解除占用"><a href="#解除占用" class="headerlink" title="解除占用"></a>解除占用</h3><pre><code>kill -9 pid or name  # 通过pid或进程名杀掉，-9表示显示执行结果# 相关命令 killallkillall apt apt-get  # 结束所有 apt apt-get 进程</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROS基本学习（一）</title>
      <link href="/2020/06/11/ROS%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/06/11/ROS%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>（看手册看的我迷迷糊糊~</p><h2 id="简单工作构成介绍"><a href="#简单工作构成介绍" class="headerlink" title="简单工作构成介绍"></a>简单工作构成介绍</h2><p>ROS是一个多节点的分布式工作平台，节点之间，当然就会有数据的收发。ROS中通过主节点来将各个分布的节点的数据记录，方便节点间相互联络。ROS运行的最小单位Node。</p><h3 id="Node的工作方式"><a href="#Node的工作方式" class="headerlink" title="Node的工作方式"></a>Node的工作方式</h3><ol><li>Topic<br> 特点：publisher发布，subscriber接收（异步完成）</li><li>Service<br> 特点：client直连server，直至会话结束</li></ol><ul><li>Package<ul><li>node<ul><li>subscriber</li><li>publisher</li><li>server</li><li>client</li><li>…</li></ul></li></ul></li></ul><h2 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h2><h3 id="Catkin"><a href="#Catkin" class="headerlink" title="Catkin"></a>Catkin</h3><pre><code>ROS提供了较为友好构建包的过程。</code></pre><ol><li>在工作空间(workspace)下执行：<br> catkin_create_pkg ${your_package_name} ${dependent_packages}</li><li>对应文件夹下，写好文件例如(demo.cpp),之后再修改<strong>CMakeList.txt</strong>中对应参数，及依赖。</li></ol><p>示例文件:</p><pre><code>cmake_minimum_required(VERSION 2.8.3)project(learning_launch)## Compile as C++11, supported in ROS Kinetic and newer# add_compile_options(-std=c++11)## Find catkin macros and libraries## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)## is used, also find other catkin packagesfind_package(catkin REQUIRED)## System dependencies are found with CMake&#39;s conventions# find_package(Boost REQUIRED COMPONENTS system)## Uncomment this if the package has a setup.py. This macro ensures## modules and global scripts declared therein get installed## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html# catkin_python_setup()################################################## Declare ROS messages, services and actions #################################################################################################### 声明 ROS 消息 服务 动作 的相关文件           #################################################### To declare and build messages, services or actions from within this## package, follow these steps:## * Let MSG_DEP_SET be the set of packages whose message types you use in##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).## * In the file package.xml:##   * add a build_depend tag for &quot;message_generation&quot;##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET##   * If MSG_DEP_SET isn&#39;t empty the following dependency has been pulled in##     but can be declared for certainty nonetheless:##     * add a exec_depend tag for &quot;message_runtime&quot;## * In this file (CMakeLists.txt):##   * add &quot;message_generation&quot; and every package in MSG_DEP_SET to##     find_package(catkin REQUIRED COMPONENTS ...)##   * add &quot;message_runtime&quot; and every package in MSG_DEP_SET to##     catkin_package(CATKIN_DEPENDS ...)##   * uncomment the add_*_files sections below as needed##     and list every .msg/.srv/.action file to be processed##   * uncomment the generate_messages entry below##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)## Generate messages in the &#39;msg&#39; folder# add_message_files(#   FILES#   Message1.msg#   Message2.msg# )## Generate services in the &#39;srv&#39; folder# add_service_files(#   FILES#   Service1.srv#   Service2.srv# )## Generate actions in the &#39;action&#39; folder# add_action_files(#   FILES#   Action1.action#   Action2.action# )## Generate added messages and services with any dependencies listed here# generate_messages(#   DEPENDENCIES#   std_msgs  # Or other packages containing msgs# )################################################## Declare ROS dynamic reconfigure parameters #################################################### To declare and build dynamic reconfigure parameters within this## package, follow these steps:## * In the file package.xml:##   * add a build_depend and a exec_depend tag for &quot;dynamic_reconfigure&quot;## * In this file (CMakeLists.txt):##   * add &quot;dynamic_reconfigure&quot; to##     find_package(catkin REQUIRED COMPONENTS ...)##   * uncomment the &quot;generate_dynamic_reconfigure_options&quot; section below##     and list every .cfg file to be processed## Generate dynamic reconfigure parameters in the &#39;cfg&#39; folder# generate_dynamic_reconfigure_options(#   cfg/DynReconf1.cfg#   cfg/DynReconf2.cfg# )##################################### catkin specific configuration ####################################### The catkin_package macro generates cmake config files for your package## Declare things to be passed to dependent projects## INCLUDE_DIRS: uncomment this if your package contains header files## LIBRARIES: libraries you create in this project that dependent projects also need## CATKIN_DEPENDS: catkin_packages dependent projects also need## DEPENDS: system dependencies of this project that dependent projects also needcatkin_package(#  INCLUDE_DIRS include#  LIBRARIES learning_launch#  CATKIN_DEPENDS other_catkin_pkg#  DEPENDS system_lib)############# Build ############### Specify additional locations of header files## Your package locations should be listed before other locationsinclude_directories(# include# $&#123;catkin_INCLUDE_DIRS&#125;)## Declare a C++ library# add_library($&#123;PROJECT_NAME&#125;#   src/$&#123;PROJECT_NAME&#125;/learning_launch.cpp# )## Add cmake target dependencies of the library## as an example, code may need to be generated before libraries## either from message generation or dynamic reconfigure# add_dependencies($&#123;PROJECT_NAME&#125; $&#123;$&#123;PROJECT_NAME&#125;_EXPORTED_TARGETS&#125; $&#123;catkin_EXPORTED_TARGETS&#125;)## Declare a C++ executable## 声明一个C++可执行文件## With catkin_make all packages are built within a single CMake context## The recommended prefix ensures that target names across packages don&#39;t collide# add_executable($&#123;PROJECT_NAME&#125;_node src/learning_launch_node.cpp)## Rename C++ executable without prefix## The above recommended prefix causes long target names, the following renames the## target back to the shorter version for ease of user use## e.g. &quot;rosrun someones_pkg node&quot; instead of &quot;rosrun someones_pkg someones_pkg_node&quot;# set_target_properties($&#123;PROJECT_NAME&#125;_node PROPERTIES OUTPUT_NAME node PREFIX &quot;&quot;)## Add cmake target dependencies of the executable## 添加cmake生成可执行文件的依赖## same as for the library above# add_dependencies($&#123;PROJECT_NAME&#125;_node $&#123;$&#123;PROJECT_NAME&#125;_EXPORTED_TARGETS&#125; $&#123;catkin_EXPORTED_TARGETS&#125;)## Specify libraries to link a library or executable target against# target_link_libraries($&#123;PROJECT_NAME&#125;_node#   $&#123;catkin_LIBRARIES&#125;# )############### Install ################ all install targets should use catkin DESTINATION variables# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html## Mark executable scripts (Python etc.) for installation## in contrast to setup.py, you can choose the destination# install(PROGRAMS#   scripts/my_python_script#   DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;# )## Mark executables and/or libraries for installation# install(TARGETS $&#123;PROJECT_NAME&#125; $&#123;PROJECT_NAME&#125;_node#   ARCHIVE DESTINATION $&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;#   LIBRARY DESTINATION $&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;#   RUNTIME DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;# )## Mark cpp header files for installation# install(DIRECTORY include/$&#123;PROJECT_NAME&#125;/#   DESTINATION $&#123;CATKIN_PACKAGE_INCLUDE_DESTINATION&#125;#   FILES_MATCHING PATTERN &quot;*.h&quot;#   PATTERN &quot;.svn&quot; EXCLUDE# )## Mark other files for installation (e.g. launch and bag files, etc.)# install(FILES#   # myfile1#   # myfile2#   DESTINATION $&#123;CATKIN_PACKAGE_SHARE_DESTINATION&#125;# )############### Testing ################# Add gtest based cpp test target and link libraries# catkin_add_gtest($&#123;PROJECT_NAME&#125;-test test/test_learning_launch.cpp)# if(TARGET $&#123;PROJECT_NAME&#125;-test)#   target_link_libraries($&#123;PROJECT_NAME&#125;-test $&#123;PROJECT_NAME&#125;)# endif()## Add folders to be run by python nosetests# catkin_add_nosetests(test)</code></pre><ol start="3"><li>编译</li></ol><pre><code>cd $&#123;work_space&#125; # 通常为catkin_wscatkin_make # 自动编译未被编译的package</code></pre><ol start="4"><li>添加环境变量</li></ol><pre><code># catkin_ws下source devel/setup.bash</code></pre><p>或者在~目录下设置好自动添加(之后不需要执行第四步）</p><pre><code># ~sudo nano .bashrc# 文件末添加# source /home/&#123;user_name&#125;/&#123;workspace&#125;/devel/setup.bash</code></pre><h3 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h3><p>脑图总结</p><p><a href="./images/2190550263.xmind">ROS learning.xmind</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬取微博并将最新一条推送至微信</title>
      <link href="/2020/05/21/%E7%88%AC%E5%8F%96%E5%BE%AE%E5%8D%9A%E5%B9%B6%E5%B0%86%E6%9C%80%E6%96%B0%E4%B8%80%E6%9D%A1%E6%8E%A8%E9%80%81%E8%87%B3%E5%BE%AE%E4%BF%A1/"/>
      <url>/2020/05/21/%E7%88%AC%E5%8F%96%E5%BE%AE%E5%8D%9A%E5%B9%B6%E5%B0%86%E6%9C%80%E6%96%B0%E4%B8%80%E6%9D%A1%E6%8E%A8%E9%80%81%E8%87%B3%E5%BE%AE%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>首先感谢<a href="https://github.com/dataabc/">dataabc</a>所写的weibo-scrawler项目，非常感谢能够开源。</p><ul><li>部署</li><li>调参<ul><li>config.json</li><li>msg.py</li></ul></li><li>使用</li></ul><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="clone-项目"><a href="#clone-项目" class="headerlink" title="clone 项目"></a>clone 项目</h2><pre><code>git clone https://github.com/Ermaotie/weibo-crawler.git</code></pre><h2 id="安装相关module"><a href="#安装相关module" class="headerlink" title="安装相关module"></a>安装相关module</h2><pre><code>pip install -r requirement.txt</code></pre><h1 id="调参"><a href="#调参" class="headerlink" title="调参"></a>调参</h1><h2 id="config-json"><a href="#config-json" class="headerlink" title="config.json"></a>config.json</h2><p>详细设置见<a href="https://github.com/Ermaotie/weibo-crawler">github</a><br>这里必须将文件格式保存为json<br>若想要定期执行，请将<code>since_date</code>设置为 <strong>int</strong> 型整数</p><h2 id="msg-py"><a href="#msg-py" class="headerlink" title="msg.py"></a>msg.py</h2><ol><li>方糖server酱绑定微信并获取SCKEY</li><li>填入SCKEY，修改文件路径为 </li></ol><pre><code>weibo/微博用户名/微博id.json</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="使用crontab-定期执行"><a href="#使用crontab-定期执行" class="headerlink" title="使用crontab 定期执行"></a>使用crontab 定期执行</h2><pre><code>crontab -e# 编辑定时执行任务0 12 * * * python weibo.py # 绝对路径0 12 * * * python msg.py # 绝对路径# 每天12时0分 执行xxx# 注意python版本</code></pre><h2 id="crontab-命令format"><a href="#crontab-命令format" class="headerlink" title="crontab 命令format"></a>crontab 命令format</h2><pre><code>*    *    *    *    *    your command-    -    -    -    -|    |    |    |    ||    |    |    |    +----- 星期中星期几 (0 - 7) (星期天 为0)|    |    |    +---------- 月份 (1 - 12) |    |    +--------------- 一个月中的第几天 (1 - 31)|    +-------------------- 小时 (0 - 23)+------------------------- 分钟 (0 - 59)</code></pre><h2 id="查看任务列表"><a href="#查看任务列表" class="headerlink" title="查看任务列表"></a>查看任务列表</h2><pre><code>crontab -l</code></pre><h3 id="To-Do-将msg写入weibo-py中"><a href="#To-Do-将msg写入weibo-py中" class="headerlink" title="To Do: 将msg写入weibo.py中"></a>To Do: 将msg写入weibo.py中</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>float在计算机中的存储</title>
      <link href="/2020/05/12/float%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/"/>
      <url>/2020/05/12/float%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>在了解float之前，先来复习一下int的存储方式</p><h2 id="int"><a href="#int" class="headerlink" title="int"></a>int</h2><ul><li>原码</li><li>补码</li><li>反码<br>以在32的计算机系统中为例，<br>一个int占四个字节，也就是32位<br>第一位表示正负(0正1负），后面三十一位表示数。<br>因此，int的范围是 $-2^{32}$(100000…000) 到 $2^{32}-1$(01111…11111)<h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2></li><li>组成<ul><li>正负 第一位</li><li>数位 往后八位</li><li>数值 余下23位</li></ul></li></ul><p>float可以看作是二进制的科学计数法，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10.25</span><br><span class="line">#采用二进制表示</span><br><span class="line">1010.01</span><br><span class="line">1.01001*2**3</span><br></pre></td></tr></table></figure><p>接下来会以这个例子作为介绍。</p><h3 id="正负-0正1负"><a href="#正负-0正1负" class="headerlink" title="正负 0正1负"></a>正负 0正1负</h3><h3 id="数位-采取“平移”的思想来理解"><a href="#数位-采取“平移”的思想来理解" class="headerlink" title="数位 采取“平移”的思想来理解"></a>数位 采取“平移”的思想来理解</h3><p>八位二进制数均为正可表达的数的范围是0~2**9-1，我们以127为界限，也就是将127看作0，划分正负，即将指数部分划为正负两部分。</p><pre><code># 1.01001*2**3# 指数为3# 127+3=130# 130 = 2**7+2**1# 数位区应写为# 01000010</code></pre><h3 id="数值，小数部分"><a href="#数值，小数部分" class="headerlink" title="数值，小数部分"></a>数值，小数部分</h3><p>因为第一位数基本上(有例外)都是一，所以我们省去。</p><pre><code># 1.01001*2**3# 省去变为 01001，则后面的数位由0补齐。</code></pre><p>最终表达为<br>0 01000010 010010000…000<br>再来一个例子</p><pre><code># 0.5# 0 01111110 100000...00</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装并使用v2ray客户端</title>
      <link href="/2020/05/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85%E5%B9%B6%E4%BD%BF%E7%94%A8v2ray%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2020/05/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85%E5%B9%B6%E4%BD%BF%E7%94%A8v2ray%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用v2ray也有一两年的时间了，用的挺舒服添加订阅就完事儿了，也没有心思去深挖一下为什么我用的是V2rayN？还要下载内核？恰好这几天折腾树莓派，想用走一下代理，结果并没有想的那么直接。</p><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><ul><li>调整v2ray的config.json<ul><li>写好inbounds &amp; outbounds</li></ul></li><li>使用proxychains4<ul><li>下载安装</li><li>配置代理</li><li>实现命令</li></ul></li></ul><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><pre><code>git clone https://github.com/rofl0r/proxychains-ng.gitsudo su - root# 到下载目录编译安装./configuremake &amp;&amp; make install</code></pre><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><pre><code>cp ./src/proxychains.conf /etc/proxychains.confvim /etc/proxychains.conf# 将最后的 socks4 127.0.0.1 9095 改为 socks5  127.0.0.1 1080(与v2ray 对应即可）exit # 退出root用户</code></pre><h4 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h4><p>想通过代理的命令前加<strong>proxychains4</strong></p><pre><code>proxychains4 curl ip.sb</code></pre><h2 id="浅入了解"><a href="#浅入了解" class="headerlink" title="浅入了解"></a>浅入了解</h2><p>v2rayN其实就像是博客的主题，让BLOG变得平易近人，好看又方便。真正实现功能的是v2ray-core。</p><h3 id="v2ray-core"><a href="#v2ray-core" class="headerlink" title="v2ray-core"></a>v2ray-core</h3><p>从config.json入手，我们来看看v2ray-core运行。</p><pre><code># config.json&#123;  &quot;log&quot;: &#123;    &quot;access&quot;: &quot;&quot;,    &quot;error&quot;: &quot;&quot;,    &quot;loglevel&quot;: &quot;warning&quot;  &#125;,  &quot;inbounds&quot;: [    &#123;      &quot;port&quot;: 10808,      &quot;listen&quot;: &quot;0.0.0.0&quot;,      &quot;protocol&quot;: &quot;socks&quot;,      &quot;sniffing&quot;: &#123;        &quot;enabled&quot;: true,        &quot;destOverride&quot;: [          &quot;http&quot;,          &quot;tls&quot;        ]      &#125;,      &quot;settings&quot;: &#123;        &quot;auth&quot;: &quot;noauth&quot;,        &quot;udp&quot;: true,        &quot;ip&quot;: null,        &quot;clients&quot;: [      &#123;        &quot;id&quot;: &quot;b831381d-6324-4d53-ad4f-8cda48b30811&quot;,  // 用户 ID，客户端与服务器必须相同        &quot;alterId&quot;: 64      &#125;    ]      &#125;,      &quot;streamSettings&quot;: null    &#125;  ],  &quot;outbounds&quot;: [    &#123;      &quot;tag&quot;: &quot;proxy&quot;,      &quot;protocol&quot;: &quot;vmess&quot;,      &quot;settings&quot;: &#123;        &quot;vnext&quot;: [          &#123;            &quot;address&quot;: &quot;google.com&quot;,            &quot;port&quot;: 80,            &quot;users&quot;: [              &#123;                &quot;id&quot;: &quot;749bf9f9-3423-3666-86ef-87e9b9e2a332&quot;,                &quot;alterId&quot;: 0,                &quot;email&quot;: &quot;t@t.tt&quot;,                &quot;security&quot;: &quot;auto&quot;              &#125;            ]          &#125;        ],        &quot;servers&quot;: null,        &quot;response&quot;: null      &#125;,      &quot;streamSettings&quot;: &#123;        &quot;network&quot;: &quot;ws&quot;,        &quot;security&quot;: &quot;&quot;,        &quot;tlsSettings&quot;: &#123;          &quot;allowInsecure&quot;: true,          &quot;serverName&quot;: &quot;d6a5e4d7238acfab4dd366754a9bd95a.wuyiauto.com&quot;        &#125;,        &quot;tcpSettings&quot;: null,        &quot;kcpSettings&quot;: null,        &quot;wsSettings&quot;: &#123;          &quot;connectionReuse&quot;: true,          &quot;path&quot;: &quot;/user&quot;,          &quot;headers&quot;: &#123;            &quot;Host&quot;: &quot;d6a5e4d7238acfab4dd366754a9bd95a.wuyiauto.com&quot;          &#125;        &#125;,        &quot;httpSettings&quot;: null,        &quot;quicSettings&quot;: null      &#125;,      &quot;mux&quot;: &#123;        &quot;enabled&quot;: true      &#125;    &#125;,    &#123;      &quot;tag&quot;: &quot;direct&quot;,      &quot;protocol&quot;: &quot;freedom&quot;,      &quot;settings&quot;: &#123;        &quot;vnext&quot;: null,        &quot;servers&quot;: null,        &quot;response&quot;: null      &#125;,      &quot;streamSettings&quot;: null,      &quot;mux&quot;: null    &#125;,    &#123;      &quot;tag&quot;: &quot;block&quot;,      &quot;protocol&quot;: &quot;blackhole&quot;,      &quot;settings&quot;: &#123;        &quot;vnext&quot;: null,        &quot;servers&quot;: null,        &quot;response&quot;: &#123;          &quot;type&quot;: &quot;http&quot;        &#125;      &#125;,      &quot;streamSettings&quot;: null,      &quot;mux&quot;: null    &#125;  ],  &quot;dns&quot;: null,  &quot;routing&quot;: &#123;    &quot;domainStrategy&quot;: &quot;IPIfNonMatch&quot;,    &quot;rules&quot;: []  &#125;&#125;</code></pre><p>v2ray-core可调参数真的是太灵活了，简单看几个主要的叭~</p><h3 id="inbounds-and-outbounds"><a href="#inbounds-and-outbounds" class="headerlink" title="inbounds and outbounds"></a>inbounds and outbounds</h3><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><p>简单来说就是“出界”和“入界”。在v2ray中，其实并没有client与server的严格划分。它既可以做服务端，也可以是客户端，有点类似与节点（Node)。<strong>inbound</strong>是如何与上一节点连接，<strong>outbound</strong>是如何与下一节点连接。对于第一个节点，inbound与“浏览器”相连，也就是本地代理，对于最后一个节点，<strong>outbound</strong>与目标网站相连。所有相连的这些桥就是<strong>inbounds</strong>和<strong>outbounds</strong>。</p><pre><code># inbounds&quot;port&quot;: 10808, #端口&quot;listen&quot;: &quot;0.0.0.0&quot;, #监听地址&quot;protocol&quot;: &quot;socks&quot;, # socks协议，浏览器向服务器端发出的数据包被打包成socks。&quot;client&quot;: [          &#123;            &quot;id&quot;: &quot;b831381d-6324-4d53-ad4f-8cda48b30811&quot;,  // 用户 ID，客户端与服务器必须相同            &quot;alterId&quot;: 64          &#125;        ]</code></pre><p>打包成socks后，v2ray收到用预设id加密打包为vmess协议的包。再根据<strong>outbounds</strong>中的参数进行发送。</p><pre><code># outbounds&quot;outbounds&quot;: [            &#123;              &quot;tag&quot;: &quot;proxy&quot;,              &quot;protocol&quot;: &quot;vmess&quot;, # 可以看到协议变成了vmess              &quot;settings&quot;: &#123;                &quot;vnext&quot;: [                  &#123;                    &quot;address&quot;: &quot;google.com&quot;, # 下一节点地址                    &quot;port&quot;: 80, # 端口                    &quot;users&quot;: [                      &#123;                        &quot;id&quot;: &quot;749bf9f9-3423-3666-86ef-87e9b9e2a332&quot;,                        &quot;alterId&quot;: 0,                        &quot;email&quot;: &quot;t@t.tt&quot;,                        &quot;security&quot;: &quot;auto&quot;                      &#125;                    ]                  &#125;                ]</code></pre><p>下一节点对上一节点发来的vmess包利用预存的client的id进行解密，解完之后会校验时间，时间一致就会将数据包继续加密成vmess包，转发到下一节点。直至到达目标网站。<br>最后一个节点的outbounds.portocol是freedom，理解为直连叭。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown轻量标记语言学习</title>
      <link href="/2020/05/07/MarkDown%E8%BD%BB%E9%87%8F%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/05/07/MarkDown%E8%BD%BB%E9%87%8F%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="编辑器：Typora"><a href="#编辑器：Typora" class="headerlink" title="编辑器：Typora"></a>编辑器：Typora</h3><p>事实上，Typecho编辑器也默认支持Markdown</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>语法较为简单且能够直接使用部分html标签，怪不得被众人称之为轻量呢~</p><ul><li>标题<ul><li>推荐使用  # 几个# 就表示几级标题</li></ul></li><li>段落<ul><li>换行：末尾添加两个空格，然后回车</li><li>斜体： *斜体文本*     <em>斜体文本</em></li><li>粗体： **粗体文本**          <strong>粗体文本</strong></li><li>斜体： ***粗斜体文本***      <strong><em>粗斜体文本</em></strong><ul><li>字体中* 均可以用_来代替</li></ul></li><li>删除线：<del>删除线</del>  使用~~在文字两边</li><li>下划线： <u>underline</u> 使用html中的u标签</li><li>脚注： 1b.mk[^Come here and drink a bottle of milk！]</li><li>分隔线 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">*****</span><br><span class="line">- - -</span><br><span class="line">----------</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><ul><li>区块： &gt;<blockquote><p>这是一个区块</p></blockquote></li><li>代码区块： 四个空格或一个制表符或 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\\&#96;&#96;&#96;javascript(可不填)</span><br><span class="line">\\代码区域</span><br><span class="line">\\&#96;&#96;&#96;</span><br><span class="line">忽略\\</span><br></pre></td></tr></table></figure></li><li>链接： <a href="https://1b.mk/">Demo</a><ul><li>[Demo2][1]<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Demo](https:1b.mk)</span><br><span class="line">[Demo2][1]</span><br><span class="line">[1]: https:&#x2F;&#x2F;1b.mk</span><br></pre></td></tr></table></figure></li></ul></li><li>图片 同 “链接”</li><li>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</li></ul><p>基本用法到此处结束~<br>PS:由于该主题对一些语法的展示进行了美化，一些效果会有出入。<br>[^Come here and drink a bottle of milk!]: 来喝一瓶牛奶!!<br>[1]: <a href="https://1b.mk/">https://1b.mk</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git命令学习</title>
      <link href="/2020/05/02/Git%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/05/02/Git%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="./images/403841589.jpg" alt="(1).jpg"></p><h2 id="仓库结构："><a href="#仓库结构：" class="headerlink" title="仓库结构："></a>仓库结构：</h2><p><img src="./images/2772529628.jpg" alt="1588409468(1).jpg"></p><h2 id="基础操作："><a href="#基础操作：" class="headerlink" title="基础操作："></a>基础操作：</h2><p><img src="./images/2137430414.jpg" alt="1588409521(1).jpg"></p><h2 id="常用操作："><a href="#常用操作：" class="headerlink" title="常用操作："></a>常用操作：</h2><p><img src="./images/896156408.jpg" alt="1588409858(1).jpg"></p><p>多人协作情况下的细节：</p><p>为了减少冲突的产生，可以先将master <strong>merge</strong> 到自己的分支，之后再merge 到master</p><p><a href="./images/364696890.pdf">导图下载</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROS安装跳坑指南</title>
      <link href="/2020/05/02/ROS%E5%AE%89%E8%A3%85%E8%B7%B3%E5%9D%91%E6%8C%87%E5%8D%97/"/>
      <url>/2020/05/02/ROS%E5%AE%89%E8%A3%85%E8%B7%B3%E5%9D%91%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="官方Kinetic版安装链接：http-wiki-ros-org-cn-kinetic-Installation-Ubuntu"><a href="#官方Kinetic版安装链接：http-wiki-ros-org-cn-kinetic-Installation-Ubuntu" class="headerlink" title="官方Kinetic版安装链接：http://wiki.ros.org/cn/kinetic/Installation/Ubuntu"></a>官方Kinetic版安装链接：<a href="http://wiki.ros.org/cn/kinetic/Installation/Ubuntu">http://wiki.ros.org/cn/kinetic/Installation/Ubuntu</a></h1><p>国内安装真的是太不友好了！！！！！！</p><hr><h2 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h2><p>1.安装包下载太慢</p><p>更换清华镜像源及软件源<br>镜像源列表：<br><a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/</a></p><p>重写地址： </p><pre><code>/etc/apt/sources.list</code></pre><p>软件源:   </p><pre><code>sudo sh -c &#39;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#39;</code></pre><p>2.ros版本不一致<br>查看方法：</p><pre><code>rosdep --versionapt-cache policy python-rosdep</code></pre><p>版本若不同：<br>需卸载通过pip安装的版本，通过apt安装</p><pre><code>sudo apt-get remove --purge python-rosdep python-pipsudo apt-get updatesudo apt-get install python-rosdep</code></pre><p>3.所有的timeout<br>S：<br>①更改NS服务<br>  所在目录：<code>/etc/resolv.conf</code><br>  推荐更换为谷歌DNS</p><pre><code>nameserver 8.8.8.8nameserver 8.8.4.4</code></pre><p>需要注意的是，ns设置将在每次重新启动后刷新</p><p>②直接将域名所指向的IP设为静态(推荐)<br>  首先到<a href="https://ipaddress.com/">ipaddress.com</a>查找需要设置为静态的域名</p><pre><code>raw.githubusercontent.comgithub.comgithub.global.ssl.fastly.netcodeload.github.com</code></pre><p>  以ip在前，域名在后的形式写入</p><pre><code>/etc/hosts</code></pre><p>例：</p><pre><code>199.232.68.133    raw.githubusercontent.com</code></pre><p>(安装完成后记得将新写入的静态解析擦除，因为GITHUB服务器的IP会更换）</p><p>③使用代理服务<br>  通过shadowsocks或者V2ray，在ubuntu上可能会更加难以操控，如果你了解如何使用，那么这个办法是最省事的，请到<a href="http://www.v2ray.com/">v2ray主页</a>查看如何使用。当然也有一个不太成熟的类似V2rayN式GUI界面的软件——<a href="https://github.com/jiangxufeng/v2rayL">v2rayL</a>(需要设置http以及socket端口转发）</p><p>④安装在哪里？<br>  不推荐安装在虚拟机以及树莓派中，但依然是可以安装的。</p><pre><code>为什么？运行前需要编译很多相关文件</code></pre><p>  Ubuntu 16是最适合装Kinetic的版本<br>关于树莓派3/3+/4安装：<br>直接烧好已经安装好ROS Kinetic的镜像：<a href="https://downloads.ubiquityrobotics.com/pi.html">点击进入</a></p><p>目前遇到坑就这么多了。相关问题详见：<br>孤峰乔木：<a href="https://mp.weixin.qq.com/s?__biz=MzAwNTg5NzUyOA==&mid=2247483943&idx=1&sn=3ad640fd41b2d661ec6f18437219098c&chksm=9b14ee70ac6367661c84490b0e4e98a351e5b05ef65351cca6aceae9adb0caacb7f39a30262e&mpshare=1&scene=1&srcid=0502thJjcK5N6ELd8Ua8wpXy&sharer_sharetime=1588382530879&sharer_shareid=b06e24e740e1d94e6298702d6950f001&key=caf03409094d441c5e7510adb2045afcd862781d483efe22cc617aea57bdf942684599fd07e2140a7829bbf97fa5a7be40543e982acd619505d2a796a27212ecfbb714a4bb1005ab6c17b6aae925654f&ascene=1&uin=MTkwNDAxMTU3OQ==&devicetype=Windows%2010%20x64&version=62090070&lang=zh_CN&exportkey=AzdT3dUghxveKf0UOF5fHoM=&pass_ticket=m9hSQuzboCOWFuzOJube+MaAL74fPQUHB60b7W07TpGfqnF3xXpsaNjkwSfgQvFP">rosdep问题解决</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>轻量博客搭建（tcpsc)</title>
      <link href="/2020/04/08/%E8%BD%BB%E9%87%8F%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA(tcpsc)/"/>
      <url>/2020/04/08/%E8%BD%BB%E9%87%8F%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA(tcpsc)/</url>
      
        <content type="html"><![CDATA[<h2 id="typecho-caddy-php7-sqlite3-cloudflare"><a href="#typecho-caddy-php7-sqlite3-cloudflare" class="headerlink" title="typecho+caddy+php7+sqlite3+cloudflare"></a><strong>typecho+caddy+php7+sqlite3+cloudflare</strong></h2><p>系统Debian10：<br>执行相应的更新操作,以及安装必要的依赖</p><pre><code>apt updateapt install lsb-releaseapt install net-tools</code></pre><p>优化打开文件的限制次数，默认的打开文件数是1024：</p><pre><code>echo &#39;* soft nofile 51200* hard nofile 51200&#39; &gt;&gt; /etc/security/limits.confulimit -n 51200echo &#39;fs.file-max = 51200net.core.rmem_max = 67108864net.core.wmem_max = 67108864net.core.netdev_max_backlog = 250000net.core.somaxconn = 4096net.ipv4.tcp_syncookies = 1net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_tw_recycle = 0net.ipv4.tcp_fin_timeout = 30net.ipv4.tcp_keepalive_time = 1200net.ipv4.ip_local_port_range = 10000 65000net.ipv4.tcp_max_syn_backlog = 8192net.ipv4.tcp_max_tw_buckets = 5000net.ipv4.tcp_fastopen = 3net.ipv4.tcp_mem = 25600 51200 102400net.ipv4.tcp_rmem = 4096 87380 67108864net.ipv4.tcp_wmem = 4096 65536 67108864net.ipv4.tcp_mtu_probing = 1net.ipv4.tcp_congestion_control = hybla&#39; &gt;&gt; /etc/sysctl.confsysctl -p</code></pre><p>更新php7.2的软件源</p><pre><code>#添加GPGwget -O /etc/apt/trusted.gpg.d/php.gpg https://mirror.xtom.com.hk/sury/php/apt.gpg#安装apt-transport-httpsapt-get install apt-transport-https#添加sury软件源sh -c &#39;echo &quot;deb https://packages.sury.org/php/ $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/php.list&#39;#更新软件源缓存apt-get update</code></pre><p>安装php 7.2</p><pre><code>apt install php7.2-fpm php7.2-mysql php7.2-curl php7.2-gd php7.2-mbstring php7.2-xml php7.2-xmlrpc php7.2-zip php7.2-opcache -y</code></pre><p>设置php</p><pre><code>sed -i &#39;s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/&#39; /etc/php/7.2/fpm/php.ini </code></pre><p>php更多命令：</p><pre><code>systemctl restart php7.2-fpm  #重启systemctl start php7.2-fpm  #启动systemctl stop php7.2-fpm  #关闭systemctl status php7.2-fpm  #检查状态</code></pre><hr><p>安装sqlite3</p><pre><code>apt install php7.2-sqlite3#创建数据库文件mkdir /www/db #示例cd /www/dbsqlite3 testDB.db#创建以后权限加满，可读写chmod -R 777 /www/db</code></pre><hr><p>安装caddy：</p><pre><code>#下载并解压Caddywget &quot;https://caddyserver.com/download/linux/amd64?license=personal&amp;telemetry=off&quot; -O - | tar -xzv#新建并写入Caddyfile，目录最好放在Caddy下https://yourdomain.com &#123;    root /www/web/bulid    tls self_signed    fastcgi / /run/php/php7.2-fpm.sock php &#123;         ext .php        split .php        index index.php   &#125;   proxy /hello 127.0.0.1:10000 &#123;      websocket      header_upstream -Origin    &#125;   rewrite &#123;        if &#123;path&#125; not_match ^\/admin        to &#123;path&#125; &#123;path&#125;/ /index.php?&#123;query&#125;    &#125;&#125;</code></pre><p>使用自签名证书，<strong>cloudflare的Catch需要设置Full模式。</strong></p><p>启动Caddy：</p><pre><code>./caddy &gt; caddy.log 2&gt;&amp;1 &amp;</code></pre><p>相关命令：</p><pre><code>启动：systemctl start caddy停止：systemctl stop caddy重启：systemctl restart caddy</code></pre><hr><p>安装typecho：</p><pre><code>#下载wget --no-check-certificate https://github.com/typecho/typecho/releases/download/v1.1-17.10.30-release/1.1.17.10.30.-release.tar.gz -O typecho.tar.gztar -zxvf typecho.tar.gz -C  /www/web#使用本Blog模板wget --no-check-certificate  https://github.com/Zisbusy/Akina-for-Typecho/archive/v3.0.zipmv /Akina-for-Typecho-3.0/Akina/*  /www/web/build/usr/themes/Akina</code></pre><h2 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a><strong>大功告成！</strong></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ssh连接树莓派&amp;xrdp远程连接</title>
      <link href="/2020/04/08/ssh%E8%BF%9E%E6%8E%A5%E6%A0%91%E8%8E%93%E6%B4%BE-xrdp%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
      <url>/2020/04/08/ssh%E8%BF%9E%E6%8E%A5%E6%A0%91%E8%8E%93%E6%B4%BE-xrdp%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>买回来一块树莓派裸板，没想到ssh连接花了这么长时间。</p><p>首先是在写入系统时需要创建一个名为ssh的文件夹。16年之后的版本都需要这样。因为默认的ssh的关闭的。<br>之后是利用一根网线，直接接到猫的网口，再用<strong>Advanced IP Scanner</strong>扫描找到raspberry的IP地址。</p><h2 id="ssh连接："><a href="#ssh连接：" class="headerlink" title="ssh连接："></a>ssh连接：</h2><pre><code>username：pipassword：raspberry</code></pre><h2 id="连接Wifi："><a href="#连接Wifi：" class="headerlink" title="连接Wifi："></a>连接Wifi：</h2><pre><code>sudo raspi-config</code></pre><p>2 Network Options<br>然后回车，输入SSID，password。</p><pre><code>sudo reboot</code></pre><p>重启自动链接。</p><h2 id="改为静态IP："><a href="#改为静态IP：" class="headerlink" title="改为静态IP："></a>改为静态IP：</h2><p>（否则每次重启后连接都得先找地址）</p><pre><code>sudo nano /etc/dhcpcd.conf</code></pre><p>在文件末加入</p><pre><code>interface eth0# 指定静态IP，/24表示子网掩码为 255.255.255.0static ip_address=192.168.1.20/24# 路由器/网关IP地址static routers=192.168.1.1# 手动自定义DNS服务器static domain_name_servers=114.114.114.114</code></pre><p>WiFi则将第一行改为：</p><pre><code>interface wlan0</code></pre><p>重启生效：</p><pre><code>sudo reboot</code></pre><h2 id="安装xrdp："><a href="#安装xrdp：" class="headerlink" title="安装xrdp："></a>安装xrdp：</h2><p>首先更改软件源：</p><pre><code>sudo vi /etc/apt/sources.list</code></pre><p>更新：</p><pre><code>sudo apt-get upgrade</code></pre><p>安装xrdp：</p><pre><code>sudo apt-get install xrdp</code></pre><p>安装完成后即可通过win10自带的远程桌面连接。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ipv6服务器访问ipv4</title>
      <link href="/2020/04/02/ipv6%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BF%E9%97%AEipv4/"/>
      <url>/2020/04/02/ipv6%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BF%E9%97%AEipv4/</url>
      
        <content type="html"><![CDATA[<p>首先编辑DNS，改为DNS64地址：</p><pre><code>sudo vi /etc/resolv.confnameserver 2001:67c:2b0::4nameserver 2001:67c:27e4::64</code></pre><p>然后编辑/etc/yum/pluginconf.d/fastestmirror.conf，改一下</p><pre><code>enable=0</code></pre><p>更新软件源：</p><pre><code>sudo vi /etc/apt/sources.list</code></pre><p>编辑为相应源，并更新。</p><pre><code>sudo apt-get update</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Pyinstaller打包时可能会造成的一些问题</title>
      <link href="/2020/03/15/Pyinstaller%E6%89%93%E5%8C%85%E6%97%B6%E5%8F%AF%E8%83%BD%E4%BC%9A%E9%80%A0%E6%88%90%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/15/Pyinstaller%E6%89%93%E5%8C%85%E6%97%B6%E5%8F%AF%E8%83%BD%E4%BC%9A%E9%80%A0%E6%88%90%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>pyinstaller基本参数</p><pre><code>-D 零散文件，不完全打包-F 只有exe-w 窗口--nonconsole 无控制台</code></pre><p>在打包过程中的问题：</p><p>pyinstaller 在打包过程中，不会将import的库中引用或依赖的文件一并打包，所以我们需要通过-D来打包，并从python文件夹中找到对应的库，复制到打包后的文件夹中</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
